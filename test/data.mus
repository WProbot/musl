# DATA() fills in "array" with some data.
# Its purpose is the same as the DATA statement in
# old BASICs, but it differs in how it achieves it.

# The @ operator creates a reference: DATA() expects as
# its first parameter the name of a variable to populate,
# and the @array basically converts to the string "array"
DATA(@array, "Alice", 2, "Carol")

# Subsequent calls to DATA() appends to the array:
DATA(@array, "Danny", 5, "Freddy")

# array['length'] contains the number of items
# in the array
PRINT("Length: ", array['length'])

# Bob and Eddie have been replaced by numbers 
# to show that DATA() doesn't care about the
# types of its parameters.
FOR i = 1 TO array['length'] DO
	PRINT(i, " ", array[i])
NEXT

# To understand references better, see the
# output of the following PRINT():
testRef = "HELLO WORLD!!! LOL"
PRINT("@testRef = '" & @testRef & "'")

# Some recent changes affected STR$() and INT(). Test them:
PRINT('STR$(1234) = ', STR$(1234))
PRINT('STR$("hello") = ', STR$("hello"))
PRINT('INT(1234) = ', INT(1234))
PRINT('INT("hello") = ', INT("hello"))

# I snuck my tests for IFF() in here:
PRINT("IFF(1) : ", iff(1, "right", "wrong"))
PRINT("IFF(0) : ", iff(0, "wrong", "right"))

x = MAP(@NUMBERS$, "Alice", 1111, "Bob", 2222, "Carol", "hello world")
PRINT(x & " items inserted into map " & @NUMBERS$)

# Subsequent calls to MAP() updates existing values and inserts new data
MAP(@NUMBERS$, "Carol", "New Value", "Dave", 555)

PRINT("numbers$[\"Alice\"] = ", numbers$["Alice"])
PRINT("numbers$[\"Bob\"] = ", numbers$["Bob"])
PRINT("numbers$[\"Carol\"] = ", numbers$["Carol"])
PRINT("numbers$[\"Dave\"] = ", numbers$["Dave"])

# The next section tests the PUSH() and POP() functions.

foo = "Hello"
bar = 123

# For more sophisticated applications, references can also be used with callbacks:
CALL(@theSub)

PRINT("After Sub: foo=" & foo & " bar=" & bar)

PRINT(" ~~ The End ~~")

END

TheSub:
	# PUSH() and POP() can be used to simulate local variables in a sub,
	# by pushing their values to the stack.
	PUSH(foo)
	PUSH(bar)
	
	# You are now free to use foo and bar however you like:
	foo = 789
	bar = "alacazam!"
	PRINT("Inside Sub: foo=" & foo & " bar=" & bar)
	
	# Before the sub returns you pop the old values back
	# (in the reverse order in which they were pushed)
	bar = POP()
	foo = POP()
	RETURN
