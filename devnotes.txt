My Developer Notes

Differences from traditional BASICs:
====================================

PRINT is a function call, not a statement (mostly because if used as an embedded escripting language there may not be anywhere to print to).

Comments use hash symbols rather than single quotes. This is partly because I wanted single quotes to have the same meaning as double quotes, a la Javacript.

REM is not supported for comments.

Statements found in some old BASICs that are not available include CLS, LOCATE, WHILE-WEND and so on.

DIM is not needed (and not implemented) because the languag is not strongly typed.

There aren't any arrays, only hash tables, and they are indexed using [] instead of ()

Things I would lake to change (when I find time):
=================================================

The () around function parameters should be optional:
    PRINT "Hello World"
should be equivalent to
	PRINT("Hello World")
even if I only implement it at the statement level.

I'm seriously considering making the language weakly and dynamically typed. Then + would always mean addition and strings will be converted to integers. The ampersand will be used for string concatenation.

It would be a lot of work, but then m->s_vars and m->n_vars can be combined into m->vars. There would then be no distinction between str_expr and expr in the syntax. The $ symbol can still be part of identifiers, but it would not be compulsory to use it to identify variables containing strings.

ToDo Built-In Functions:
========================

Ideas for built-in functions that may be useful go in this section.

Replace$(str$, find, repl) - Replaces occurances of 'find' with 'repl' in str

GSUB$() - Like Awk's gsub() function (instead of replace$() above)

Speaking of Awk, how about a function AWK(line$, [delim$]) that takes line$ and splits it into columns in the _C[i], so that a Musl script can do some of the same work as Awk. It returns the number of columns found in the line.

IIF(expr, a, b) and IIF$(expr, a$, b$)

PUSH() and POP() functions that store variables inside some internal stack temporarily (useful for GOSUBs, because they can emulate local variables).

I'd also like to have a feature to dump all the variables somewhere for debugging Musl programs. It should be an API function and a Built-in function.

